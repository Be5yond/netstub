# 配置日志格式
log_format main escape=json  '{'
                                '"host": "$host",'
                                '"remote_addr": "$remote_addr",'
                                '"remote_user": "$remote_user",'
                                '"time_local": "$time_local", '
                                '"request": "$request",'
                                '"status": "$status", '
                                '"uri": "$uri",'
                                '"http_user_agent": "$http_user_agent",'
                                '"request_time": "$request_time", '
                                '"request_body": "$request_body", '
                                '"request_header": "$request_header", '
                                '"response_body": "$response_body"'
                                '}' ;
access_log  /var/log/nginx/access.log  main;

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;
    charset utf-8;
    charset_types application/json;
    default_type application/json;

    proxy_set_header Host $http_host;

    lua_need_request_body   on;
    set $request_header     "";
    header_filter_by_lua_block     {
        json = require "cjson"
        ngx.var.request_header = json.encode(ngx.req.get_headers())
    }

    set $response_body      "";
    body_filter_by_lua_block     {
        local response_body = string.sub(ngx.arg[1],1,10000)
        ngx.ctx.buffered =  (ngx.ctx.buffered or "")   .. response_body  
        if ngx.arg[2] then
            ngx.var.response_body = ngx.ctx.buffered
        end
    }


    location / {
        access_by_lua_file /etc/nginx/conf.d/md.lua; 
        resolver 8.8.8.8;
        proxy_pass http://$host;

        log_by_lua_block {      
            local body = ngx.req.get_body_data()
            ngx.ctx.request_body = body
        }
    }

    location /static/ {
        # root /etc/nginx/;   方便本地调试临时注释掉
        root /etc/nginx/conf.d;
        index index.html;
    }

    # mock配置管理接口
    location /admin/mock/ {
        content_by_lua_file /etc/nginx/conf.d/admin/mock.lua; 
    }

    # 域名分组配置管理接口
    location = /admin/mock/domain {
        content_by_lua_file /etc/nginx/conf.d/admin/mock.lua; 
    }
    
    # replay 配置管理接口
    location = /admin/replay {
        content_by_lua_file /etc/nginx/conf.d/admin/replay.lua; 
    }

    # 查询 loki数据
    location = /admin/loki {
        content_by_lua_file /etc/nginx/conf.d/admin/loki.lua; 
    }


    location ~ /test/(.*) {
        set $host_ip '';
        access_by_lua_file /etc/nginx/conf.d/replay.lua; 

        resolver 8.8.8.8;
        proxy_pass http://$host_ip/$1;

        log_by_lua_block {      
            local body = ngx.req.get_body_data()
            ngx.ctx.request_body = body
        }
    }


    location = /sum {
        # 只允许内部调用
        internal;
    
        # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
        # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
        content_by_lua_block {
            local args = ngx.req.get_uri_args()
            ngx.say(tonumber(args.a) + tonumber(args.b))
        }
    }
    
    location = /app/test {
        content_by_lua_block {
            local res = ngx.location.capture(
                "/sum", {args={a=3, b=8}}
                )
            ngx.say("status:", res.status, " response:", res.body)
        }
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

server {
    listen      443 ssl;
    server_name backend1.example.com;

    ssl_certificate        /etc/nginx/conf.d/server.crt;
    ssl_certificate_key    /etc/nginx/conf.d/server.key;
#   ssl_client_certificate /etc/ssl/certs/ca.crt;
    ssl_verify_client      off;

    proxy_set_header Host $http_host;
    lua_need_request_body   on;

    set $response_body      "";
    body_filter_by_lua_block     {
        local response_body = string.sub(ngx.arg[1],1,10000)
        ngx.ctx.buffered =  (ngx.ctx.buffered or "")   .. response_body  
        if ngx.arg[2] then
            ngx.var.response_body = ngx.ctx.buffered
        end
    }


    location / {
        access_by_lua_file /etc/nginx/conf.d/md.lua; 
        resolver 8.8.8.8;

        # proxy_pass https://$host;
        content_by_lua_block {
            local http = require "resty.http"
            local json = require("cjson")
            local httpc = http.new()
            local res, err = httpc:request_uri("https://"..ngx.var.http_host..":443"..ngx.var.request_uri, {
                -- headers = ngx.req.get_headers(),
                method = ngx.req.get_method(),
                body = ngx.req.get_body_data(),
                ssl_verify = false
            })

            if res then
                -- ngx.header = res.header
                ngx.header['Content-Type'] = 'application/json; charset=utf-8'
                ngx.say(res.body)
                return
            end
        }

        log_by_lua_block {      
            local body = ngx.req.get_body_data()
            ngx.ctx.request_body = body
        }
    }

    location /ok {
        content_by_lua_block {
            ngx.say(ngx.header)
        }
    }
}
